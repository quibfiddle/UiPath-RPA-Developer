UiPath Orchestrator
	A web based application that lets you managed UiPath Robot's

	It provides management capabilities for large amount of robots and for the human reviewers

Using UiPath Studio, we can publish projects as packages
	So this first video was just a broad overview and not a walk along. That explains the lack of explanation for setting up robots

To establish a connection between a robot and Orchestraor, we need to perform 3 steps:
	Provision the machine in Orchestrator
	

	Provision the Robot
		Robots can be created with a couple different configurations
			In this first tutorial we are setting up a Floating one 

	Setting up the local robot with the needed information from Orchestrator


	Ran into a bit of a challenge associating my session with UIRobot: will check out later;

	System.OperationCanceledException: The operation was canceled.
   at System.Threading.CancellationToken.ThrowOperationCanceledException()
   at System.IO.Pipes.NamedPipeClientStream.ConnectInternal(Int32 timeout, CancellationToken cancellationToken, Int32 startTime)
   at System.IO.Pipes.NamedPipeClientStream.<>c__DisplayClass21_0.<ConnectAsync>b__0()
   at System.Threading.Tasks.Task.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at UiPath.Ipc.NamedPipe.NamedPipeClient`1.<ConnectToServerAsync>d__5.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at UiPath.Ipc.ServiceClient`1.<EnsureConnection>d__20.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at UiPath.Ipc.ServiceClient`1.<>c__DisplayClass17_0`1.<<InvokeAsync>b__3>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at UiPath.Ipc.IOHelpers.<WithResult>d__3.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at UiPath.Ipc.IOHelpers.<WithTimeout>d__8`1.MoveNext()


 /-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ 10/1/2019

 So lets try and reproduce that robot allocation challenge.

 Rebooted
 started uipath robot
input machine id
and
https://platform.uipath.com
for url

Connection worked right away. Guess it was just in need of a reboot.

anyways, back to lesson orchestrator 2018.3 - video part 2

We are setting up afloating robot, a robot that is not associated with a particular computer.

When connecting the robot to orchestrator is says status: unlicensed.
	some googling got me here:
		https://forum.uipath.com/t/orchestrator-connection-showing-unlicensed/129609

		They are saying stuff along the lines of
			"Please check username from your robot config, make sure match with your pc username"

		So ill double check that. I am also going to make the integration account a local admin on my computer.

		restarted and reconnected robot at each step

		changing local permisions did not change the unlicensed state...
			nah
		Updated and verified good crednetials in orchestrator..
			nope
		Deleted Paralax (the robot in orchestrator)
			created Paralax2
			I used cmd > to generate case sensitive hostname and username for the robot settings
			...
			It seems that in the tutorial they use the creds of the active windows user...
			Reconnected, status unlicensed.
			Alright time to try with the active user (me)

		Opened back up the robot
			Used my credentials
			not licensed.
			Perhpas i can recreate the machine profile...?
			recreated machine profile, connected with the new machine key
			unlicensed

This looks like a problem for tomorrow.

/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/ 10/7

Going to go forard with training, and deal with the licensing in the exercise.

Robots can be triggered locally and remotely, using the UiPath app

The settings tab in the robot details view in orchestrator can be used to set intial paramaters for the robot to run by,

Publish a project
 

Go to UiPath Studio to create a new Process. The New Blank Process window is displayed.

	Done (in the practice exercise 1 folder)

Click the Name field and type a name, such as “OrchestratorHelloWorld”, and then press Create.

	Check

Drag and drop a Message Box activity to the Designer panel.

	Check. Doing a quick restart, as its acting a little funny.

Click the Text field and type any text, such as “Hello UiPath Orchestrator!”.
Run the process. After the message box appears, press OK to return to Studio. This test is completed.

	done

Under Design, click Publish. In the new window select Robot Defaults and hit Publish. A message pops up. It specifies that a package has been published locally (by default, in C:\ProgramData\UiPath\Packages).

	yep its there.
	Seems pretty inane.

Exercise two

Register your robot to Orchestrator
 

The following is a one time action, for each individual robot. It does not apply to Floating Robots:
 

In Orchestrator go to Machines, click Add and then select Standard Machine. The Provision A Standard Machine page is displayed.

	Done. Named Orchestrator Testing.

Then access the robot interface by right-clicking the UI Icon on the Taskbar. Select Settings... Additionally, allow the robot to make changes if a window requesting that is displayed. 


Note: If you can’t find the icon, make sure the service is running. Click here to see the instructions. 

The Robot Settings window is displayed. Copy the Machine Name and leave the window open.


	done
 

Go back to Orchestrator tab, paste the machine name in the Name field and hit Provision.

	ok

For the newly created machine click on View and copy the machine key to clipboard.

	ok

Go to Robots, click Add and select Standard Robot. 

	

Select the Machine created earlier, then in the Name field enter a suggestive name that enables you to properly identify and handle the robot instance later.
Note: Make sure you follow good naming principles, to avoid robot mismanagement when multiple robots are added.
	
	OrchestratorEx2

In the Domain\Username and Password fields, enter the Windows credentials of your personal machine. If you don't know your domain\username open a Command Prompt and type whoami.

	DESKTOP-O6THBGM\Stuart

Select the Development robot type from the Type drop-down list and hit Create.
Note: To take advantage of the High Density Robots feature, select the Create another check box. The option enables you to add multiple robots to the same machine if the Windows instance allows it, i.e. if the Windows Server is used. For more information about High Density Robots, see this article. 

Go to Robot Settings window and paste the key copied from Orchestrator in the Machine key field.
Copy the Orchestrator URL and paste it in the Robot Settings window, in the corresponding field and click Connect.
Congratulations! The robot should now be visible under the Robots section, with the Available status.
For more information about connecting the robot to Orchestrator you can see this article.

	OHHHHH, the machine name has to be used from the Orchestrator SEttings window on the machine when provisioning a machine name in orchestrator platform. The bots are licensed now.

/-/-/-/-/-/-/-/-/-/--/-/-/--/-/-/-/-/-/-/ 10/9

Exercise 3

Publishing your first process
 

To make the robot work, we still need to go through a few steps:
1. Create a new Environment
An Environment is a great way to keep your Robots grouped together. Think of Environments as teams of coworkers collaborating to fulfill the same goal.
On the Robots page, select the Environments tab. 
Click the Add button.
In the Name field, enter an Environment title. Make sure you follow good naming principles.
Note: Give the new Environment a suggestive name,such as Finance Robots or HR Robots. You can even pick a more creative one, such as DemoEnvironment, which is used in this session.

	done

Click Create. The Manage Environment window is displayed.
Add your newly provisioned Robot by selecting the checkbox associated with it, and then click Update.

	done

Your Robot is now part of this environment. To edit an environment, click on Manage. Robots can be added or removed from any environment by selecting or deselecting them.

2. Create a process
In UiPath Studio, in Design ribbon click on Publish and again on Publish. Now that your Robot is connected to Orchestrator, the processes are automatically published to the Orchestrator feed. Note that the publishing location has been changed to https://platform.uipath.com/.

	done

The Processes page enables users to create a new process to be run from Orchestrator.

In Orchestrator, open the Processes page and click Add. The Deploy Process window is displayed.
Find OrchestratorHelloWorld in the Package Name section.
Note: Use the default package version.

Choose the Environment you want to run the process on and click Create. Let’s assume you chose the “DemoEnvironment” environment.
Click Create to save your settings.

	done

3. Running a process manually
In Orchestrator, navigate to the Jobs page.
Click on Start and identify the previously created process. In this case, our process is OrchestratorHelloWorld_DemoEnvironment.
Select the robots in the environment you want to run the process on, and then click Start.
The “Hello UiPath Orchestrator” message box appears.
Congratulations! You have just run your first process from Orchestrator.

	it worked. Dope.

Lesson 3 
How Robot executions can be triggered and maanged

Jobs can be queued up manually through the JObs / Processes view.

Jobs can be set up to run at a predefined schedule using hte schedulee view.


Jobs can be scheduled and stopped from the Jobs view:

Kill will stop the process exactly as soon as the automation gets the command to kill the proces, regardless of what step of the auomation is at.

Stop will stop the executing automation at the next specified stop point.
	"Should Stop" can be added to workflows to include a "graceful" stopping point in the automation, that can be activated from Orchestrator.


Robots can be dynamically allocated when Jobs are created.
	When creating a job, just select the "Allocate Dynamically" when specifying robots

Leson4
Logs

Select view logs

Robot logging information can be changes, and by default it just logs at "Information" which just says details about the process starting or finishing.

Processes can be configured to generate logs at varying levels of severity

Lesson5
Assets
Assetts can be used to pass intial settings or varriables to a process with out modifying the Process itself.

There are four types of assets that can be used when spinning up a process,
	Text
		Use the GetAsset activity in the process to work with this one.
	Bool
		same
	Integer
		same
	Credential
		Use the GetCredential activity in the processes to work with this one

Queues can be created and used to have robots working together to work through a shared set of data with out duplicating effort.
	An example of this is assigning several robots to work through a list in an excel document that executes a process for each row of data in the document.

	When in a queue robots assign a status to each item in the queue.
		New
			An item that was added to a queue, and has not yet been interacted with by a robot

		In Progress
			A robot is processing the item in queue

		Sucessful
			An item in the queue with this status was succesfully processed by the robot.

		Failed
			Application
				Not gone over in this video, but i suspect its a failure resulting from a fault with UiPAth, or the Windows enviornment.

			Buisness
				A failure resulting from bad data. Typically happens when an item contains data in an unexpected way, like the automation was expecting an interger, but in that given field it got a string.

		Retried
			An item that failed, but the process has an AutoRetry specified in Orchestrator

		Abandoned
			The status of a new item in a queue that was not touched for 24 hours